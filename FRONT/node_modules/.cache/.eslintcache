[{"/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/index.js":"1","/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/reportWebVitals.js":"2","/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/App.js":"3","/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/Graficas.js":"4"},{"size":856,"mtime":1694921716838,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1660960612123,"results":"7","hashOfConfig":"6"},{"size":8485,"mtime":1695325891628,"results":"8","hashOfConfig":"6"},{"size":8381,"mtime":1695260048950,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"66ibsh",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"13"},"/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/index.js",[],[],[],"/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/reportWebVitals.js",[],[],"/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/App.js",["24","25"],[],"/home/kruiz/so1_proyecto1_2S2023_201603009/FRONT/src/Graficas.js",["26","27","28","29","30","31","32"],[],"\n\nimport React, { useEffect , useState} from \"react\";\nimport { Link ,useNavigate } from \"react-router-dom\";\nimport './App.css';\nimport { CircularProgressbar ,buildStyles} from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\n\nimport CanvasJSReact from '@canvasjs/react-charts';\n//var CanvasJSReact = require('@canvasjs/react-charts');\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n \n\n\n\n\n//Indica la maquina que esta seleccionada , por default siempre es la uno \nvar Maquina='0';\n\nvar direccion=process.env.REACT_APP_IP //'http://127.0.0.1:8080/';\n\n\n\n\nconst Consult =async (ruta,body)=>{\n\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body)\n  };\n\n  const response = await fetch(direccion+ruta,requestOptions)\n  if (!response.ok) {\n    throw new Error('Data coud not be fetched!')\n  } else {\n    return response.json()\n  }\n\n}\n\n\n\n\n\n\n\n/*INICIA PARTE GRAFICA EN EL PROGRAMA */\n\n function Graficas() {\n   //const [products, setProducts] = useState(dataResponse);\n   const [cpuD, setCpuD] = useState([]);\n   const [ramD, setRamD] = useState([]);\n   const [proD, setProD] = useState([]);\n   const [macD, setMacD] = useState([]);\n \n   const [isLoading1, setIsLoading1] = useState(false);\n   const [isLoading2, setIsLoading2] = useState(false);\n   const [isLoading3, setIsLoading3] = useState(false);\n \n   const [isLoading4, setIsLoading4] = useState(false);\n \n   const navigate = useNavigate();\n \n \n \n   const inicioH = () => {\n     // 👇️ navigate to /\n     navigate('/inicio');\n   };\n \n   \n\n   \n\n \n   const UpdateData=()=>{\n\n    if(Maquina!=='0'){\n      //prmera consulta para obtener data del cpu \n      var body1={machine:Maquina}\n      \n      Consult('get_cpu_values',body1)\n      .then((res) => {\n        var cpu=[]\n    \n        for (let i = 0; i < res[\"data\"].length; i++) {\n          const element = res[\"data\"][i];\n          var calculo=parseFloat(((element[\"cpu_usado\"]/element[\"cpu_total\"])*100).toFixed(4));\n          cpu.push( { x: i, y: calculo})\n        }\n        setCpuD(cpu)\n        setIsLoading1(true);\n        \n      })\n      .catch((e) => {\n        console.log(e.message)\n      });\n\n/////////////\n\n\n      Consult('get_ram_values',body1)\n      .then((res) => {\n        var ram=[]\n\n        for (let i = 0; i < res[\"data\"].length; i++) {\n          const element = res[\"data\"][i];\n          var calculo=parseFloat(((element[\"mem_usado\"]/element[\"mem_total\"])*100).toFixed(4));\n          ram.push( { x: i, y: calculo})\n\n\n        }\n        setRamD(ram)\n        setIsLoading2(true);\n        \n      })\n      .catch((e) => {\n        console.log(e.message)\n      });\n\n\n\n        console.log( \"xxx\");\n        console.log( cpuD);\n          \n        console.log( \"yyy\");\n        console.log( ramD);\n          \n\n\n        console.log( \"maquina\");\n        console.log( Maquina);\n    }\n \n   }\n \n \n \n   const GetMachines = () => {\n     var body1={machine:\"\"}\n     Consult('get_machines',body1)\n     .then((res) => {\n       const datan=res;\n       console.log(\"aaa\");\n       console.log(datan);\n       setMacD(datan);\n       setIsLoading4(true);\n       console.log(\"asigna\");\n       console.log(macD);\n \n     })\n     .catch((e) => {\n       console.log(e.message)\n     });\n   };\n \n \n \n     /*\n     useEffect(()=>{\n       UpdateData();\n     }, [])\n     */\n \n     useEffect(()=>{\n       GetMachines() ;\n \n       //if(!isLoading4){\n       //}\n     }, [setMacD])\n     \n\n\n\n\n \n ///////////////////////////////////\n console.log(\"ddddddddddddddddd\");\nconsole.log(cpuD);\n \n const options = {\n  animationEnabled: true,\n  theme: \"light2\",\n  data: [{\n    type: \"spline\",\n    showInLegend: false,\n    dataPoints: cpuD\n  }]\n}\n\nconst options2 = {\n  animationEnabled: true,\n  theme: \"light2\",\n  data: [{\n    type: \"spline\",\n    showInLegend: false,\n    dataPoints: ramD\n  }]\n}\n \n //////////////////////////////////////\n   return (\n     \n     isLoading4 ? (\n       \n     <div className=\"principal\" >\n\n     <table class=\"table table-dark table-striped\"  >\n       <thead>\n         <tr>\n             <td colSpan={6}>\n               <h4>RENDIMIENTO CPU Y MEMORIA RAM GRAFICA</h4>\n             </td>\n         </tr>\n       </thead>\n       <thead>\n       <tr>\n           <td>\n             <select class=\"form-select\" onClick={selectMachine} name=\"maquina\" id=\"maquina\">\n                  <option value=\"0\" selected>Seleccione la maquina </option>\n                 {\n                   macD[\"data\"].map((data,index)=>(\n                     <option value={data[\"machine\"]}>Maquina {data[\"machine\"]}</option>\n                   ))\n                 }\n                 \n \n             </select>\n           </td>\n           <td>\n             <button onClick={UpdateData}>Actualizar</button>\n             &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n             <button onClick={inicioH}>Inicio</button>\n           </td>\n \n         </tr>\n       <tr>\n           <td>\n             CPU\n           </td>\n           <td>\n             RAM\n           </td>\n \n         </tr>\n       </thead>\n \n \n \n       {\n \n         isLoading1&&isLoading2 ? (\n           <tbody>\n             <tr>\n               <td className=\"graphs\">\n \n                 <div className=\"cuadro\">\n                  <CanvasJSChart className=\"grafica\" options = {options} />\n                 \n                 </div>  \n \n               </td>\n               <td className=\"graphs\">\n \n                 <div  className=\"cuadro\">\n                  <CanvasJSChart className=\"grafica\" options = {options2} />\n                   \n                 </div>  \n \n               </td>\n \n             </tr>\n \n             <tr>\n               <td>\n                  \n               </td>\n               <td>\n                  \n               </td>\n             </tr>\n           </tbody>\n         ) : (\n           \n             <tbody>\n                \n             </tbody>\n           \n         )\n \n \n       }\n \n     </table>\n \n \n \n \n \n \n \n     {\n \n       isLoading3 ? (\n         <table class=\"table table-dark table-striped\">\n         <thead>\n             <tr>\n                 <td colSpan={7}>\n                   <h4>PROCESOS</h4>\n                 </td>\n             </tr>\n           </thead>\n \n \n           <thead>\n           <tr>\n               <td>\n                 PARENT_PID\n               </td>\n               <td>\n                 PROCESS\n               </td>\n               <td>\n                 STATE\n               </td>\n               <td>\n                 PIDCHILD\n               </td>\n               <td>\n                 PROCESSCHILD\n               </td>\n               <td>\n                 STATECHILD\n               </td>\n \n             </tr>\n           </thead>\n           <tbody>\n           \n           {\n             proD.map((data,index)=>(\n               <tr >\n                 <td>\n                   <input type=\"text\"  key={index} value={data[\"PARENT_PID\"]} class=\"form-control\"  />\n                 </td>\n                 <td>\n                   <input type=\"text\" value={data[\"PROCESS\"]}   class=\"form-control\"  />\n                 </td>\n                 <td>\n                   <input type=\"text\" value={data[\"STATE\"]}  class=\"form-control\"  />\n                 </td>\n                 <td>\n                   <input type=\"text\" value={data[\"PIDCHILD\"]}  class=\"form-control\"   />\n                 </td>\n                 <td>\n                   <input type=\"text\" value={data[\"PROCESSCHILD\"]}  class=\"form-control\"  />\n                 </td>\n                 <td>\n                 <input type=\"text\" value={data[\"STATECHILD\"]}  class=\"form-control\"  />\n                 </td>\n \n               </tr>\n \n             )\n             )\n           }\n \n           \n           \n           </tbody>\n         </table>\n       ) : (\n         \n           <table>\n             <tbody>\n             <tr>\n                 <td></td>\n             </tr>\n             </tbody>\n           </table>\n         \n       )\n \n \n     }\n \n \n \n \n \n   </div>\n     ) : (\n       \n         <div className=\"principal\" >\n \n           \n         </div>\n       \n     )\n\n\n\n\n   );\n}\n\nexport default Graficas;\n\n\n\n\nfunction selectMachine(){\n  var seleccionado= document.getElementById(\"maquina\").value;\n\n  try{\n\n      console.log(\"SELECCIONADO:\"+seleccionado);\n      Maquina=seleccionado;\n  \n  }catch(error){\n\n  }\n}\n\n\n\n\n\n\n\n\n",{"ruleId":"33","severity":1,"message":"34","line":4,"column":10,"nodeType":"35","messageId":"36","endLine":4,"endColumn":14},{"ruleId":"37","severity":1,"message":"38","line":161,"column":8,"nodeType":"39","endLine":161,"endColumn":17,"suggestions":"40"},{"ruleId":"33","severity":1,"message":"34","line":4,"column":10,"nodeType":"35","messageId":"36","endLine":4,"endColumn":14},{"ruleId":"33","severity":1,"message":"41","line":6,"column":10,"nodeType":"35","messageId":"36","endLine":6,"endColumn":29},{"ruleId":"33","severity":1,"message":"42","line":6,"column":31,"nodeType":"35","messageId":"36","endLine":6,"endColumn":42},{"ruleId":"33","severity":1,"message":"43","line":12,"column":5,"nodeType":"35","messageId":"36","endLine":12,"endColumn":13},{"ruleId":"33","severity":1,"message":"44","line":56,"column":17,"nodeType":"35","messageId":"36","endLine":56,"endColumn":24},{"ruleId":"33","severity":1,"message":"45","line":61,"column":23,"nodeType":"35","messageId":"36","endLine":61,"endColumn":36},{"ruleId":"37","severity":1,"message":"38","line":173,"column":9,"nodeType":"39","endLine":173,"endColumn":18,"suggestions":"46"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GetMachines'. Either include it or remove the dependency array.","ArrayExpression",["47"],"'CircularProgressbar' is defined but never used.","'buildStyles' is defined but never used.","'CanvasJS' is assigned a value but never used.","'setProD' is assigned a value but never used.","'setIsLoading3' is assigned a value but never used.",["48"],{"desc":"49","fix":"50"},{"desc":"49","fix":"51"},"Update the dependencies array to be: [GetMachines, setMacD]",{"range":"52","text":"53"},{"range":"54","text":"53"},[3580,3589],"[GetMachines, setMacD]",[3494,3503]]